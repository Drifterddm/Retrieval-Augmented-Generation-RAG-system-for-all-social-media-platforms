This project is licensed under the MIT License - see the LICENSE file for details.

python
Copy code

### `requirements.txt`

List all the necessary packages:

tweepy==4.10.0 requests==2.28.2 transformers==4.30.0 sentence-transformers==2.2.2 torch==2.0.1

arduino
Copy code

### `fetch_twitter.py`

```python
import tweepy
import os

def fetch_tweets(query, max_results=10):
    bearer_token = os.getenv('TWITTER_BEARER_TOKEN')
    client = tweepy.Client(bearer_token=bearer_token)
    response = client.search_recent_tweets(query=query, max_results=max_results)
    tweets = [tweet.text for tweet in response.data]
    return tweets
fetch_facebook.py
python
Copy code
import requests
import os

def fetch_facebook_posts(query, access_token, limit=10):
    url = f'https://graph.facebook.com/v12.0/search'
    params = {
        'q': query,
        'type': 'post',
        'limit': limit,
        'access_token': access_token
    }
    response = requests.get(url, params=params)
    data = response.json()
    posts = [post['message'] for post in data.get('data', [])]
    return posts
main.py
Integrates the fetching, processing, and generating parts:

python
Copy code
from fetch_twitter import fetch_tweets
from fetch_facebook import fetch_facebook_posts
from data_processing.embedding import create_embeddings
from data_processing.retrieval import retrieve_relevant_posts
from data_processing.generation import generate_response
import os

def rag(query):
    twitter_posts = fetch_tweets(query)
    facebook_posts = fetch_facebook_posts(query, os.getenv('FACEBOOK_ACCESS_TOKEN'))
    
    combined_data = {
        'twitter': twitter_posts,
        'facebook': facebook_posts
    }
    
    retrieved_context = retrieve_relevant_posts(query, combined_data)
    response = generate_response(retrieved_context, query)
    
    return response

if __name__ == "__main__":
    query = "What are people saying about the new Spider-Man movie?"
    response = rag(query)
    print(f"Query: {query}")
    print(f"Response: {response}")
